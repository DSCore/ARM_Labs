#include <fsm.h>
#include <stdint.h>

#include <LED.h>
#include <mutex.h>
#include <USART2.h>

static uint32_t fsm_mutex;


static Ping_t buffer;
static uint32_t rcvd = 0;

static uint32_t message_reported = 0;

static state_t state = STATE_RESET;

/** Callback functions for states: **/

void state1_USART2_callback_fn(uint8_t byte)
{
	USART3_putchar(byte); //forward to wifi module
}

void state1_USART3_callback_fn(uint8_t byte)
{
	USART2_putchar(byte); //forward to console
}

void receive_message_systick_callback(){
	//Print out the received message
	Wifly_Print_Last_Received_Message();
	//Set the message reported flag to 1;
	message_reported = 1;
	//Disable the systick timer
	set_systick_disabled();
	//Restart the state to send the message again.
	if( fsm_lock() == FSM_LOCK_ACQUIRED )
		{
			if(fsm_get_state() == STATE_2){
				fsm_set_state(STATE_2);
			}
			fsm_unlock();
		}
}

void state2_USART2_callback_fn(uint8_t byte)
{
	//Take no input, we're in PING mode
	//USART3_putchar(byte); //forward to wifi module
}

void state2_USART3_callback_fn(uint8_t byte)
{
	USART2_putstr("received: \0");
	USART2_putchar(byte+48);
	USART2_putstr(" \n\r\0");
	Wifly_Receive_Ping(byte);
//	USART2_putchar(byte+48); //TODO: This is debug statement, delete it
}



void fsm_init(void)
{
	mutex_init(&fsm_mutex);
	while( fsm_lock() != FSM_LOCK_ACQUIRED );
	fsm_set_state(STATE_RESET);
	fsm_unlock();
}

uint8_t fsm_lock(void)
{
	uint8_t retval = FSM_LOCK_FAILED;

	if( mutex_lock(&fsm_mutex) == MUTEX_LOCKED )
		retval = FSM_LOCK_ACQUIRED;

	return retval;
}

void fsm_unlock(void)
{
	mutex_unlock(&fsm_mutex);
}

state_t fsm_get_state(void)
{
	return state;
}

void fsm_set_state(state_t new_state)
{
	/* only do this if the FSM has been locked! */
	if( fsm_mutex == MUTEX_LOCKED )
	{
		state = new_state;

		switch( state )
		{
		case STATE_RESET:
		case STATE_1:
		default:
			/* Initialize the LEDs */
			LED_init();

			/* Initialize the USART2 for x-over internet communication */
			USART2_init(state1_USART2_callback_fn);

			/* Initialize the USART3 for x-over internet communication */
			USART3_init(state1_USART3_callback_fn);

			/* Turn on just the blue LED */
			LED_update( LED_ORANGE_OFF | LED_RED_OFF | LED_BLUE_ON | LED_GREEN_OFF );
			break;

		case STATE_2:
			/* Turn on the orange LED only */
			LED_update( LED_ORANGE_ON | LED_RED_OFF | LED_BLUE_OFF | LED_GREEN_OFF );

			//Set up the USART interrupts to buffer the received data from the PING
			USART3_init(state2_USART3_callback_fn);
			USART2_init(state2_USART2_callback_fn);

			//Send a ping message to the server
			Wifly_Send_Ping();

			//Start up a 1 second timer - wait 1 second then print
			message_reported = 0;
			systick_init(receive_message_systick_callback);
			set_systick_time(1);
			break;

		case STATE_3:
			/* Turn on the green LED only */
			LED_update( LED_ORANGE_OFF | LED_RED_OFF | LED_BLUE_OFF | LED_GREEN_ON );
			//Print out the value read from the potentiometer
			USART2_putstr("Pot position is: ");
			printHex(ADC_read());
			break;
		}
	}
}
