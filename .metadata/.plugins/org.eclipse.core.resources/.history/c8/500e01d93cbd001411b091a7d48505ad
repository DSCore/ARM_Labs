#include <stdint.h>

#include <USART3.h>
#include <USART2.h>
#include <Wifly.h>

//static Ping_t message;
static Ping_t response;
static Update_resp_t update;
static uint8_t *strctptr;
static int rcvd;

void Wifly_Send_Ping(){
	int i=0;
//	void *ptr=0;
//	uint8_t *byte;

	Ping_t msg;
	Ping_t *pmsg;
	uint8_t *bytp;

	pmsg = &msg;
	bytp = (uint8_t *)pmsg;

	pmsg->type = PING;
	pmsg->id = ID;

	USART2_putstr("\n\r\0");

	for(i=0; i<sizeof(Ping_t); i++,bytp++){
		USART3_putchar(*bytp);
		USART2_putchar((*bytp)+48);

	}

	USART2_putstr("\n\r\0");
	USART2_putstr("Sent!\n\r\0");

}

void Wifly_Receive_Ping(uint8_t byte){
	int scale;
	int i;

//	USART2_putstr("Received!\n\r\0");

		 if (rcvd%4==3){scale=16777216/*2^(8*3)*/;}
	else if (rcvd%4==2){scale=65536/*2^(8*2)*/;}
	else if (rcvd%4==1){scale=256/*2^(8*1)*/;}
	else if (rcvd%4==0){scale=1/*2^(8*0)*/;}

	if (rcvd<4){
		response.type=response.type+byte*scale;
	}
	else if (rcvd<8) {
		response.id=response.id+byte*scale;
	}
	rcvd++;
}

/**
 * Updates the server with the value read in from the potentiometer.
 * value - the value read in from the potentiometer.
 */
void Wifly_Send_Update(uint32_t value){
	int i=0;

	Update_req_t msg;
	Update_req_t *pmsg;
	uint8_t *bytp;

	pmsg = &msg;
	bytp = (uint8_t *)pmsg;

	pmsg->type = UPDATE;
	pmsg->id = ID;
	pmsg->value = value;

	//Zero the number of received bytes
	rcvd = 0;

	//Zero out the response object
	update.average = 0;
	update.id = 0;
	update.type = 0;
	response.type = 0;
	response.id = 0;

	USART2_putstr("\n\r\0");

	for(i=0; i<sizeof(Update_req_t); i++,bytp++){
		USART3_putchar(*bytp);
		USART2_putchar((*bytp)+48);

	}

	USART2_putstr("\n\r\0");
	USART2_putstr("Sent!\n\r\0");

}

/**
 * Receives updated bytes and puts them in the update object.
 */
void Wifly_Receive_Update(uint8_t byte){
	int scale;
	int i;

//	USART2_putstr("\n\rUpdated with: \0");
//	USART2_putchar(byte+48);

	if(rcvd < 12){
		if (rcvd%4==3){
			scale=16777216/*2^(8*3)*/;
		}
		else if (rcvd%4==2){
			scale=65536/*2^(8*2)*/;
		}
		else if (rcvd%4==1){
			scale=256/*2^(8*1)*/;
		}
		else if (rcvd%4==0){
			scale=1/*2^(8*0)*/;
		}
	}

	if(rcvd == 0){
		//Initialize the strctptr to point to the update object
		strctptr = &update;
	}

	if (rcvd<4){
		response.type=response.type+byte*scale; //Update for use in printing
		update.type = update.type+byte*scale;
	}
	else if (rcvd<8) {
//		response.id=response.id+byte*scale;
		update.id = update.id+byte*scale;
	}
	else if(rcvd<12){
		update.average = update.average+byte*scale;
	}
	else if(rcvd<131){
		//Insert the bytes at the location in the array in the structure.
		*strctptr = byte;
	}
	rcvd++;
	strctptr++;
}


void Wifly_Set_Servo_Location(uint32_t address){
	//LAB4: Ignore the given parameter.
	address = 7;



}

void Wifly_Print_Last_Received_Message(void){

	if(response.type == PING){
		USART2_putstr("Type: PING\n\rID: \0");
		USART2_putstr(i2a(response.id));
	}
	else if(response.type == UPDATE){
		USART2_putstr("Type: UPDATE\n\r\ID: \0");
		USART2_putstr(i2a(update.id));
//		printHex(update.id);
		USART2_putstr("\n\rAVERAGE: \0");
		USART2_putstr(i2a(update.average));
//		printHex(update.average);
		USART2_putstr("\n\r\VALUES:\n\r\0");
		print_array_to_string(update.values,30);
		//TODO: Print out the array
	}

	else{
		USART2_putstr("Type: \0");
		printHex(response.type);
		USART2_putstr("\n\rID: \0");
		printHex(response.id);
		USART2_putstr(" \n\r\0");
	}
}

